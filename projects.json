[
  {
    "name": "Система перенаправления СМС рассылки",
    "description": "Система создана для того, чтобы сообщения дошли до получателя, даже если первичный сервис рассылки по каким-то причинам не смог его доставить. В этом случае система перенаправляет сообщение на вторичный сервис. Так же система включает сайт, предназначенный для мониторинга рассылки и сохранения информации о получателях.",
    "short_description": "Система, перенаправляющая неотправленные одним сервисом сообщения в другой. Сайт прилагается.",
    "task": "ТЗ \"Перехват неудачных  смс с SMSС\"\n\nОписание: \nНеобходимо перехватывать СМС , неотправленные приоритетным сервисом, и отправлять\n посредством резервного сервиса. \nДля сообщений в статусе \"Недоступный номер\" из журнала отправленных в smsc.ua, пересылать текст с\n помощью резервного сервиса sms-fly.ua. \n \nИНСТРУКЦИИ API: \n1) <a href='https://smsc.ru/api/http/get_data/outbox/#menu'>https://smsc.ru/api/http/get_data/outbox/#menu</a>  - основной сервис \n2) <a href='https://sms-fly.ua/public/api.v2.02.pdf'>https://sms-fly.ua/public/api.v2.02.pdf</a>  - резервный сервис \n  \nЗАДАНИЕ: \n \n1. ежеминутно даем запрос по АПИ smsc.ua - получаем все отправленные смс \n2. вносим в журнал перехваченных все смс \n3. вносим абонента в \"Справочник абонентов\" Имя нового абонента = пусто \n4. обрабатываем только смс в статусе \"Недоступный номер\" на smsc.ua - отправляем их получателю \n через API fly-sms.ua . По результату задаем соответствующую запись в \"жрунале перехваченных\" \n \nСТРУКТУРА: \n1. БД перехваченных СМС.  \n \n    1.1 \"Журнал  перехваченных смс \" \n         поля для журнала:  \nдата / время смс / номер телефона получателя / текст смс/ статус на smsc / статус на fly-sms: успех, проблема, в процессе \nФильтры: поле поиска по тексту в заголовке каждой колонки отдельно - поиск по условию \"содержит текст\" \n \n     1.2 \"Справочник абонентов\". Поля: имя / телефон / время последнего успешного смс. Фильтры: поле поиска по тексту в заголовке каждой колонки отдельно - поиск по условию \"содержит текст\" \n \n     1.3. \"Справочник пользователей службы\" \n       \n \n \n 2. кабинет пользователей : логин  / пароль  \n \n 3. инструменты управления :   \n      3.1 Добавить / редактировать пользователей (редактировать пароль / удалить - добавить пользователя) \n      3.2 Редактировать справочник абонентов - прямо в ячейке таблицы. \n      3.3 Кнопка \"Повторить последнее смс \" в каждой строчке . Доступна всегда в журнале перехваченных смс  (в случае заминок на стороне резервного сервиса или просто для повторной отправки смс)",
    "technologies": [
      "Flask (Python)",
      "SQLAlchemy (Python)",
      "PostgreSQL",
      "HTML+CSS+JQuery(JS)",
      "API",
      "Развернуто на Ubuntu 20.04; NGINX; Gunicorn;"
    ],
    "test_link": "http://bobako.site/sms/",
    "test_notes": "В демонстрационной версии отключена проверка полей при входе, запросы к реальному АПИ не совершаются, БД наполнены случайными данными",
    "github_link": "https://github.com/Bobako/sms_handler"
  },
  {
    "name": "Сайт для менеджмента  закупок",
    "description": "Сайт, предназначенный для помощи в создании и отправки заказов поставщикам ресторана. Юз-кейс (в общем и целом): менеджер создает заказ (или изменяет предыдущий), где перечисляет все необходимые товары. Администратор получает уведомления и подтверждает заказ. Бот отправляет в телеграм чат с поставщиком всю необходимую информацию о заказе.\n\nВокруг этого ключевого функционала созданы более мелкие функции, подробнее в тз.",
    "short_description": "Сайт, предназначенный для помощи в создании и отправки заказов поставщикам ресторана.",
    "task": "ТЗ (как было предоставлено заказчиком)\n\nНазвание: ИС \"Автоматизация закупки\"\n\nПреимущества: Кроссплатформа (мобильный телефон), log изменений, автоматизация отправки сообщений поставщикам\n\nСтруктура БД: База данных ( Пользователи: { ИД, Имя, Фамилия, Должность, ИД(Заведение), Код для входа; }\n\nЗаведение: { ИД, название заведения, адрес заведения; }\n\nПоставщики: { ИД, Название, ИД(Товары), ИД(Заведение), ИД чата в Телеграмме, График возможности заказа(День недели + время до заказа) }\n\nТовары: { ИД, Имя, ИД(Од.измерения) }\n\nЕд.Измерения: { ИД, Название, Условное обозначение; }\n\nЗаказ: { ИД, Дата, ИД(Пользователь), Товары(blob), Статус заказа(Новый, Дозаказ, Заказано); } );\n\nBack/End функционал\n\n    импорт товаров (удобный)\n    Настройки системы(Добавлять/удалять/изменять Пользователей, Товары, Поставщиков) -создание отчетов (Статус заказа, товар не часто заказываемый и т.п.)\n    Предварительный просмотр заказов админом и дальнейшее подтверждение на рассылку\n    рассылка заказа товара по поставщикам через телеграммы в чате в таком виде: Добрый день (заказ №ИД(заказ))\n\nНазвание залога1 (Адрес заведения1) Название товара1 Количество Товара1 Ед.измерения1 Название товара2 Количество Товара2 Ед.измерения2\n\nНазвание залога2 (Адрес заведения2) Название товара1 Количество Товара1 Ед.измерения1 Название товара2 Количество Товара2 Ед.измерения2\n\nСпасибо __\n\n    Формирование дозаказов и рассылка дозаказов до часа (выбирая до какого заказа формируется дозаказ)\n\nЛогика работы сайта: Пользователь: Логин под своими данными, у него на основе данных бэкенда формируется таблица заказов, в которой он вносит данные Таблица вида:(поля для редактирования количество и от измерения, остальные заблокированные поля) Поставщик1 Название1 Товара1 Количество1 Ед. Измерения1 Поставщик1 Название2 Товара Количество2 Ед. Измерения2 Поставщик2 Название1 Товара1 Количество1 Ед. Измерения1 Поставщик2 Название2 Товара Количество2 Ед. Измерения2 ..... После внесения данных, пользователь отправляет заказ на адрес администратору, если администратор не подтвердил заказ (статус заказа новый), то пользователь может изменить данные без дозаказа. если администратор подтвердил заказ (статус заказа заказан) – то пользователь может сделать дозаказ, корректируя данные в таблице.\n\nАдминистратор: Логинится под своими данными, менеджерит заказы, которые сформировали пользователи (корректирует их/удаляет) и подтверждает. При дозаказе пользователем, бот в телеграмме присылает уведомление администратору с заголовком дозаказа: Пользователь: Имя Фамилия Пользователя, Дозаказ№ , Товар (количество товаров по дозаказу).\nТребования по доработкам\n\n    Чтоб товары, которые уже заказаны не подружались полностью на сайт ,а были изначально скрыты и по нужде открывались в виде спойлера)\n    Чтоб в истории заказов было указано кем было сделано и когда заказ был отправлен.\n    Сделать историю удаленных заказов (Кейс: я или кто-то ничаянно удалил заказ, чтоб была возможность восстановить его)\n    На моменте подтверждения заказа я мог изменить поставщика и ед. измерения\n    Добавить в разделе товар еще чек бокс - алкоголь, который будет отделять эту групу товара А на моменте заказа рядом с ед измерения можно было выбрать будет ли заказ официально или неофициально и дать возможность человеку, который заказывает товар выбирать ед. измерения.\n    Сделать адекватный импорт товаров: ПОСТАВЩИК ТОВАР ЕД ИЗМЕРЕНИЯ ЗАВЕДЕНИЕ - таблица со столбцами И в момент импорта выводить позиции которые повторяться или нету совпадений.\n",
    "technologies": [
      "Flask (Python)",
      "SQLAlchemy (Python)",
      "PostgreSQL",
      "HTML+CSS+JQuery(JS)",
      "TelegramBotAPI",
      "Развернуто на Ubuntu 20.04; NGINX; Gunicorn;"
    ],
    "test_link": "http://bobako.site/supply_assistant/",
    "test_notes": "Вход по ключу 0000. В демонстрационной версии БД заполнена случайными данными, бот -> supply_assistant_demo_bot",
    "github_link": "https://github.com/Bobako/supply_assistant"
  },
  {
    "name": "Телеграм-бот для получения материалов с Instagram",
    "description": "Бот предназначен для получения любых материалов (постов, stories, highlighs, reels) с публичных аккаунтов инстаграм анонимно. В боте также имеется система платной подписки (которая открывает доступ к боту после истечения пробного периода), реферальная система, возможность выбора из нескольких языков. Для парсинга использует самописную \"библиотеку\", подделывающую запросы к апи инстаграм. Бот умеет применять прокси. Без selenium и сторонних библиотек для работы с инстаграмом.",
    "short_description": "Бот предназначен для получения любых материалов (постов, stories, highlighs, reels) с публичных аккаунтов инстаграм анонимно ",
    "task": "ТЗ (как было предоставлено заказчиком)\nпо запрашиваемому логину и типу контента выдавать информацию:\n\n1) ссылки на контент актуальных stories;\n\n2) список альбомов highlights;\n\n3) ссылки на контент stories из запрашиваемого альбома highlights;\n\n4) список постов по датам с пагинацией от/до;\n\n5) информацию по запрашиваемому посту описание/кол-во лайков/кол-во комментов и ссылку(и) на контент поста;\n\n6) список reels по датам с пагинацией от/до;\n\n7) информацию по запрашиваемому reels описание/кол-во лайков/кол-во комментов и ссылку на контент поста;\n\n\nну и поддержка proxy по идее, мобильные гоняем сейчас",
    "technologies": [
      "SQLAlchemy (Python)",
      "Requests",
      "PostgreSQL",
      "TelegramBotAPI"
    ],
    "test_link": "",
    "test_notes": "Потрогать демку проекта не получится(. В 2022 году парсер перестал работать, поскольку инстаграм что то поменял в алгоритмах обнаружения парсеров, и, кроме того, был запрещен в России. Зато на гитхабе есть старые скриншоты с работой бота",
    "github_link": "https://github.com/Bobako/ig_parsing_bot"
  },

  {
    "name": "Многофункциональный автоответчик для телеграм. ",
    "description": "Программа предоставляет функционал автоответчика, с возможностью создавать цепочки сообщений, который отправятся в ответ на пришедшее ключевое слово, отправлять любые материалы (файлы, голосовые сообщения, фото, видео, кружочки), настраивать задержку между сообщениями. Широкие возможности для создания юзер-ботов без программирования. Поддерживает множество аккаунтов.",
    "short_description": "Программа предоставляет функционал автоответчика, с возможностью создавать цепочки сообщений",
    "task": "ТЗ (как было предоставлено заказчиком)\nФункционал:\n\n    У нас будет цепочка из 5-10 сбщ (сообщения отправляются в ответ на любое входящее, по порядку и только 1 раз)\n\n    Каждое сообщение настраивается индивидуально (задержка в секундах перед отправкой / сам текст или прописываем путь до отправляемого медиафайла)\n\n    Нам отправили сбщ, бот ждёт указанное время (исходя из задержки на отправку сообщения), потом помечает сбщ прочитанным. Далее, через 10-15 сек начинается действие (имитирует набор / запись и отправляет наш заготовленный медиа файл - mp3 для голосовых / mp4 для видео сбщ)\n\n    Должна быть возможность отправки как одиночного сбщ, так и сбщ состоящего из 2 и более сбщ.\n\nВ первом случае через 60 сек отправляем одиночное сбщ.\n\nВо втором случае через 60 сек отправляем сбщ состоящее из 3 ответов (задержка между ответами по 5 сек)\n\n    Если сообщение содержит определенные слова или фразы (привет//хай//доброе утро//добрый вечер) то отправлять соответствующее сбщ.\n\n    Иногда бывает, что у юзеров нет @логина, имени, стоят символы или пустой пробел вместо имени. Нужно их определять по id, чтобы понимать что и кому мы отправили.\n\nДополнения\n\nЕсли мы включаемся в диалог и сами пишем сбщ с мессенджера, то автоответчик реагирует на это, будто бы это входящее сбщ и начинает отвечать через указанное время задержки в текущей цепочке.\n\nЭту функцию нужно вынести в отдельный чекбокс (если он снят, значит автоответчик реагирует только на входящие)\n\nФункция 2: \"Временное окно цепочки\" (игнорировать входящие)\n\nАвтоответчик не должен реагировать на новые входящие, пока текущая цепочка, состоящая из нескольких сбщ, полностью не отправится.\n\nНам могут написать сразу несколько сбщ, что-то вроде.\n\n    Привет.\n\n    Как дела?\n\n    Что делаешь?\n\n    blush\n\nПосле чего в ответ отправятся 4 цепочки подряд, создавая тем самым информационный перегруз, если цепочки будут состоят из нескольких сбщ.\n\nПо идее, с момента получения первого сбщ, должно активироваться временное окно соответствующей цепочки, во время которого мы игнорируем все последующие входящие и отвечаем только одной цепочкой, а не четырьмя сразу.\n\nЕсли возможно, то вынести эту функцию в отдельный чекбокс.\n\nСюда же добавить \"Моментальное прочтение новых сбщ\"\n\nЕсли приходят новые сбщ во время обработки юзера очередной цепочкой, то мы их все помечаем \"прочитано\".\n\nДля примера: \"нам написали 5 сбщ, мы в мессенджере открываем чат и все эти сбщ помечаются у собеседника двумя зелеными галочками\", что мы их прочитали.\n\nФункция 3: \"Копирование отмеченных цепочек\" в другие аккаунты.\n\n(добавить возможность отмечать сразу несколько цепочек для копирования)",
    "technologies": [
      "SQLAlchemy (Python)",
      "Telethon",
      "Tkinter :)",
      "Asyncio"
    ],
    "test_link": "https://github.com/Bobako/tg_responder/archive/refs/heads/master.zip",
    "test_notes": "Как потрогать проект:\n\n1) Скачать проект (просто ткнуть по этой кнопке).\n2) Далее, либо запускать исполняемый файл ./executables/(linux или windows)/bot_async(.exe)\n3) Либо запускать исходники, для этого:\n4) Нужен python3.10 с возможность запускать pip.\n5) В папке с проектом pip install -r requirments.txt\n6) Можно запускать bot_async.py",
    "github_link": "https://github.com/Bobako/tg_responder"
  },

  {
    "name": "Телеграм-бот крипто-обменник ",
    "description": "Бот предназначенный для безопасного (escrow) обмена криптой между людьми. Есть несколько режимов обмена, несколько языков на выбор, бот умеет работать с АПИ бинанса для проверки поступлений на депозит, но для других операций нужно вмешательство модера.",
    "short_description": "Бот предназначенный для безопасного (escrow) обмена криптой.",
    "task": "ТЗ (как было предоставлено заказчиком)\n\nНеобходимо разработать Telegram-бот криптообменника\n\n    экспресс-обмен (через наши счета по фиату и крипте; соответственно, необходимо функционал пополнения счета, подтверждения поступления нашим оператором, обмена, создания запроса на вывод средств и функционалом вывода средств)\n\n    ескроу-обмен (пользователь вводит телеграмовский юзернейм партнера, указывает, какую валюту продает и какую покупает, два пользователи и наш модератор стыкуются в чате и совершают сделку, при этом крипта находится у нас в ескроу)\n\n    P2P обмен (пользователи могут создавать ордера на покупку и продажу крипту, а также брать ордера из тех, что залистены; в ходе сделки создается част с двумя сторонами и модераторами, как при ескроу; по результатам сделки пользователи могут выставлять оценки друг другу; ведется публичная статистика по пользователям: количество совершенных сделок и средний полученный балл)\n\n    мультивалютность (3 криптовалюты: BTC, ETH, USDT и ряд фиатных валют, которые мы укажем; мы также дадим реквизиты фиатных счетов)\n\n    мультиязычность (должно быть 4 языка: английский, французский, испанский, португальский; автоматическое предложение языка, исходя из IP пользователя)\n\n    простенькая админка для подтверждения поступления средств на фиатные средств и для получения заявок на вывод средств (вывод будет осуществлять оператор в ручном режиме).\n\nБазовая структура меню (детали в ходе согласования)\n\nПервое меню:\n\n    Operations\n\n    Wallet\n\n    Settings\n\n    Support\n\n    При нажатии на Operations:\n\n    Instant Exchange\n\n    Escrow Exchange\n\n    P2P Exchange\n\nПри нажатии на Instant Exchange:\n\nСначала идет выбор валюты, которую пользователь отдает\n\nЗатем выбор валюты, которую пользователь получает\n\nЗатем отображается курс и предлагается ввести сумму, которую пользователь хочет отдать.\n\nЕсли этой суммы на балансе, то высвечивается сообщение о необходимости пополнить кошелек\n\nПри нажатии на Escrow Exchange:\n\nCначала запрашивается юзернейм телеграм-пользователя, с которым предполагаетс совершить сделку.\n\nЗатем выбирается валюта, которая отдается, и вводится сумма\n\nЗатем выбирается валюта, которая получается, и вводится сумма\n\nЗатем контрагенту приходит предложение о сделке\n\nЕсли контрагент сделку принимает, то создается чат сделки с двумя сторонами и модератором\n\nВ чате у продавца крипты будут две кнопки: подтвердить получение фиата; указать, что фиат не получил. Если подтверждение получение фиата, то крипта из ескроу переводится на баланс покупателя крипты. Если не подтверждается получение фиата, то соответствующее сообщение направляется оператору (об этом написано в разделе “Админка” ниже)\n\nПри нажатии на P2P Exchange:\n\nСначала запрашивается валюта, которая отдается\n\nЗатем запрашивается валюта, которая получается\n\nПредлагается пользователю: (а) просмотреть активные ордера, (б) создать собственный ордер, (в) просмотреть собственные активные ордера\n\nПри выборе собственного ордера у пользователя запрашивается сумма резерва, по той валюте, которую он хочет отдать, и мин и макс сделки\n\nПри выборе пользователем существующего ордера, пользователь должен указать, конкретную сумму, которую он готов отдать. Сообщение выставляется тому, кто разместил ордер. Если принимается сделка, то создает чат из двух сторон и модератора и дальше тот же алгоритм, что и в случае с Escrow Exchange\n\n    При нажатии на Wallet должны быть три кнопки:\n\n    Depost\n\n    Withdraw\n\n    Balance\n\nПри нажатии на кнопку Deposit сначала пользователю предлагается выбрать валюту, а затем выдаются реквизиты счета в фиате или адреса кошелька, на который он должен перевести средства. После перевода, пользователь должен нажать, что оплатил. Эта информация передается оператору (а админку на сайте или, если проще, в специальный телеграм-канал)\n\nПри нажатии на кнопку Withdraw сначала пользователю предлагается выбрать валюту, затем указать выводимую сумму, а затем указать реквизиты счета в фиате или адреса кошелька, на который он хочет вывести средства. После перевода, пользователь должен нажать, что оплатил. Эта информация передается оператору (а админку на сайте или, если проще, в специальный телеграм-канал).\n\nПри нажатии на кнопку Balance пользователю отражается баланс средств во всех имеющихся у него валютах.\n\n    При нажатии на Settings должны пока должна быть одна кнопка выбора языка (языки у нас будут: английский, французский, испанский, португальский)\n\n    При нажатии на Support должны быть четыре кнопки:\n\n    Ask\n\n    Join Community\n\n    Fees\n\n    Rates\n\nПри нажатии на кнопку Ask идет переход в чат-бот, который мы сами создадим\n\nПри нажатии на кнопку Join Community идет переход в группу, которую мы сами создадим\n\nПри нажатии на кнопку Fees выдается текстовая информация, которую мы предоставим\n\nПри нажатии на кнопку Rates выдается информация о текущих курсах обмена в разделе Instant Exchange\n\nАдминка\n\nАдминку можно делать отдельно на сайте, а можно просто сделать в телеграме и она будет состоять из:\n\n    телеграм-канала, в который будет дублироваться информация о совершенных операциях (такой-то пользователь пополнил кошелек на такую-то сумму; такой создал заявку на вывод; такой-то провел обмен)\n\n    телеграм-канала или группы, в которую будет приходить информация о том, что произошло полнение счета в фиате, с возможностью для оператора подтвердить или нет поступление средств; а также будет происходит поступление реквизитов и суммы, на которые нужно вывести средства по фиату или крипте; а также будут происходить уведомления от пользователей при P2P сделке, что ему не перевели фиат (соответственно, если оператор подтверждает, что фиат не получил, то крипта из ескроу воз\n\n    телеграм-канала, группы или бота (на выбор программиста), в котором админ будет прописывать курс покупки и продажи каждого фиата к USDT (курс к фиата к BTC и ETH должен высчитываться автоматически на основе прописанного курса к USDT и подгруженного извне по API курса BTC и ETH к USDT в данный момент).\n\nПодвязывание кошельков\n\nНужно привязать, какие-то кошельки для приема BTC, ETH, USDT (TRC-20). Это может быть Binance API или кошельки Blockchair, Blockchain.com, coinbase commerce, coinpayments. Надо будет изучить и выбрать.\n\nНаверно, можно начать с Binance API и автоматически подгружать курс с Binance-а и через Binance проводить в автоматическом режиме обмен крипты на крипту в Instant Exchange.",
    "technologies": [
      "SQLAlchemy (Python)",
      "TelegramBotAPI",
      "API",
      "Развернуто на Ubuntu 20.04; Gunicorn;"
    ],
    "test_link": "https://github.com/Bobako/cryptoBot/blob/master/@bobako_crypto_demo_bot",
    "test_notes": "",
    "github_link": "https://github.com/Bobako/cryptoBot"
  }
]